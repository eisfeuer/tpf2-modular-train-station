local ConstructionUtils = require('constructionutil')
local Box = require("motras_box")
local BuildingUtils = require("motras_buildingutils")
local Transf = require "transf"
local Vec3 = require "vec3"
local Stairway = require('motras_stairway')
local t = require('motras_types')

local decorationModels = {
    models = {
        ["asset/roof/era_b_lamp_b_02.mdl"] = {
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.07737, -5.20000, 4.39750, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, -8.12500, 4.39750, 1.00000 },
            { -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, -11.05000, 3.63750, 1.00000 },
            { -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.06697, -11.05000, 3.63750, 1.00000 },
            { -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.06697, -11.05000, 3.63750, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.07737, -5.20000, 4.39750, 1.00000 },
        },
        ["station/rail/asset/era_c_single_chair.mdl"] = {
            { -0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.07737, -4.60000, 0.80000, 1.00000 },
            { -0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.07737, -4.60000, 0.80000, 1.00000 },
        },
        ["station/rail/asset/era_c_street_pillar.mdl"] = {
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -10.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -4.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -2.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -1.06205, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.81467, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -9.31927, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 2.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 1.06204, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 9.31927, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.81467, -11.57810, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 4.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 10.00000, -16.30000, 0.00000, 1.00000 },
        },
        ["station/rail/asset/era_c_trashcan.mdl"] = {
            { -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.35330, -7.48499, 0.80000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.35330, -7.48499, 0.80000, 1.00000 },
        },
    },
}



function data()
    return {
        cost = {
            price = 10000,
        },
        category = {
            categories = { "passenger buildings", },
        },
        description = {
            name = _("Small main building"),
		    description = _("Small main building with street access for passenger stations."),
		    icon = "ui/construction/station/rail/modular_station/main_building_1_era_c.tga"
        }, 
        availability = {
            yearFrom = 1980,
            yearTo = 0
        },
        type = "motras_building_platform40m_medium",
        order = {
            value = 19001,
        },
        metadata = {
            motras = {
                theme = "era_c",
                themeType = "main_building_small"
            }
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local asset = result.motras:register(slotId, {groups = {'ug_era_c'}})
            asset:addDecorationSlot(result.slots, 1, {
                position = {0.0, -3.545, 6.62002},
                slotType = 'motras_wall_mounted_decoration',
                transformation = transform,
                assetDecorationType = t.ASSET_DECORATION_WALL_MOUNTED
            })
            asset:addDecorationSlot(result.slots, 2, {
                position = {0.0, -0.63000, 6.62002},
                slotType = 'motras_wall_mounted_decoration',
                transformation = transform,
                rotation = 180,
                assetDecorationType = t.ASSET_DECORATION_WALL_MOUNTED
            })

            asset:handle(function (moduleResult)
                local buildingTransform = Transf.mul(transform, Transf.transl({x = 0.0, y = 7.5, z = 0.0}))
                BuildingUtils.makeLot(result, Box:new({ -11, -17, 0 }, { 11, 0, 4 }), buildingTransform)

                local buildingModels = {
                    mainBuilding = "station/rail/era_c/station_1_main.mdl",
                    connectionToLeftSmallBuilding = "station/rail/era_c/station_1_main_con_r.mdl",
                    connectionToLeftMediumBuilding = "station/rail/era_c/station_1_main_con_r.mdl",
                    connectionToLeftLargeBuilding = "station/rail/era_c/station_1_main_con_r.mdl",
                    connectionToRightSmallBuilding = "station/rail/era_c/station_1_main_con_l.mdl",
                    connectionToRightMediumBuilding = "station/rail/era_c/station_1_main_con_l.mdl",
                    connectionToRightLargeBuilding = "station/rail/era_c/station_1_main_con_l.mdl",
			        endingLeft = "station/rail/era_c/station_1_main_end_r.mdl",
			        endingRight = "station/rail/era_c/station_1_main_end_l.mdl",
                }

                local connectedLeft, connectedRight = BuildingUtils.makeConnectableBuilding(asset, result, buildingModels, buildingTransform, tag)
                ConstructionUtils.addModels(decorationModels, result.models, buildingTransform, tag)
                
                local platformHeight = asset:getParentGridElement():getPlatformHeight()
                if platformHeight > 0.275 then
                    local stairway = Stairway:new{
                        height = platformHeight - 0.27,
                        stepWidth = 0.29,
                        stepModel = "station/rail/motras/stairs_step_10m.mdl",
                        tag = tag
                    }

                    local leftStairsTransformation = Transf.mul(buildingTransform, Transf.rotZTransl(math.pi, {x = -5, y = 0, z = 0.8}))
                    local rightStairsTransformation = Transf.mul(buildingTransform, Transf.rotZTransl(math.pi, {x = 5, y = 0, z = 0.8}))

                    stairway:addStepsToModels(result.models, leftStairsTransformation)
                    stairway:addStepsToModels(result.models, rightStairsTransformation)
                    stairway:addPathToModels(result.models, 5, rightStairsTransformation, 0, 2.5)
                end

                if platformHeight < 0.265 then
                    table.insert(result.models, {
                        id = "station/rail/motras/stairs_step_10m.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = -5, y = -0.289, z = 0.81}))
                    })
                    table.insert(result.models, {
                        id = "station/rail/motras/stairs_step_10m.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = 5, y = -0.289, z = 0.81}))
                    })
                end
                
                if not connectedLeft then
                    table.insert(result.models, {
                        id = "station/rail/motras/platform_wall_side.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = 10.15, y = 2.5, z = 0.81 + platformHeight - 0.27}))
                    })
                end

                if not connectedRight then
                    table.insert(result.models, {
                        id = "station/rail/motras/platform_wall_side.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = -10.15, y = 2.5, z = 0.81 + platformHeight - 0.27}))
                    })
                end
            end)
        end,
        getModelsFn = function()
            return {
                { 
                    id = "station/rail/era_c/station_1_main.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
                { 
                    id = "station/rail/era_c/station_1_main_end_l.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
                { 
                    id = "station/rail/era_c/station_1_main_end_r.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
            }
        end
    }
end