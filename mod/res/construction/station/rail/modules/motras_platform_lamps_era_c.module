local Transf = require("transf")
local t = require('motras_types')

function data()
    return {
        cost = {
            price = 0,
        },
        category = {
            categories = { "decoration", },
        },
        description = {
            name = _("platform_lamps"),
		    description = _("placeable_on_platforms"),
		    icon = "ui/construction/station/rail/motras/decoration_lamps_era_c.tga"
        }, 
        availability = {
            yearFrom = 1980,
            yearTo = 0
        },
        type = "motras_decoration_lamps",
        order = {
            value = 29001,
        },
        metadata = {
            motras = {
                poleRadius = 0.05
            }
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local asset = result.motras:register(slotId)

            local gridElement = asset:getParentGridElement()
            local leftNeighbor = asset:getParentGridElement():getNeighborLeft()

            local trackTopOnly = not gridElement:hasNeighborBottom() and gridElement:getNeighborTop():isTrack()
            local trackBottomOnly = not gridElement:hasNeighborTop() and gridElement:getNeighborBottom():isTrack()

            local slotYPosition = 0
            if trackTopOnly then
                slotYPosition = -2.3
            elseif trackBottomOnly then
                slotYPosition = 2.3
            end

            if not (leftNeighbor:isPlatform() and leftNeighbor:hasAsset(33)) then
                asset:addDecorationSlot(result.slots, 1, {
                    position = {-20.0, slotYPosition, -2.4},
                    assetDecorationType = t.ASSET_DECORATION_TRUSS_MOUNTED,
                    slotType = 'motras_decoration_truss_mounted',
                    transformation = transform,
                    rotation = 0,
                    spacing = {1.0, 1.0, 1.0, 1.0}
                })
            end

            asset:addDecorationSlot(result.slots, 2, {
                position = {-10.0, slotYPosition, -2.4},
                assetDecorationType = t.ASSET_DECORATION_TRUSS_MOUNTED,
                slotType = 'motras_decoration_truss_mounted',
                transformation = transform,
                rotation = 0,
                spacing = {1.0, 1.0, 1.0, 1.0}
            })

            asset:addDecorationSlot(result.slots, 3, {
                position = {0.0, slotYPosition, -2.4},
                assetDecorationType = t.ASSET_DECORATION_TRUSS_MOUNTED,
                slotType = 'motras_decoration_truss_mounted',
                transformation = transform,
                rotation = 0,
                spacing = {1.0, 1.0, 1.0, 1.0}
            })

            asset:addDecorationSlot(result.slots, 4, {
                position = {10.0, slotYPosition, -2.4},
                assetDecorationType = t.ASSET_DECORATION_TRUSS_MOUNTED,
                slotType = 'motras_decoration_truss_mounted',
                transformation = transform,
                rotation = 0,
                spacing = {1.0, 1.0, 1.0, 1.0}
            })

            asset:handle(function ()
                if trackBottomOnly then
                    if leftNeighbor:isPlatform() and not leftNeighbor:hasAsset(33) then
                        table.insert(result.models, {
                            id = "asset/lamp_new.mdl",
                            transf = Transf.mul(transform, Transf.rotZTransl(math.pi, {x = -20.0, y = 2.3, z = -5})),
                            tag = tag
                        })
                    end
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.rotZTransl(math.pi, {x = -10.0, y = 2.3, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.rotZTransl(math.pi, {x = 0.0, y = 2.3, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.rotZTransl(math.pi, {x = 10.0, y = 2.3, z = -5})),
                        tag = tag
                    })
                elseif trackTopOnly then
                    if leftNeighbor:isPlatform() and not leftNeighbor:hasAsset(33) then
                        table.insert(result.models, {
                            id = "asset/lamp_new.mdl",
                            transf = Transf.mul(transform, Transf.transl({x = -20.0, y = -2.3, z = -5})),
                            tag = tag
                        })
                    end
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = -10.0, y = -2.3, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = 0.0, y = -2.3, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "asset/lamp_new.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = 10.0, y = -2.3, z = -5})),
                        tag = tag
                    })
                else
                    if leftNeighbor:isPlatform() and not leftNeighbor:hasAsset(33) then
                        table.insert(result.models, {
                            id = "station/rail/asset/cargo_lamps.mdl",
                            transf = Transf.mul(transform, Transf.transl({x = -20.0, y = 0.0, z = -5})),
                            tag = tag
                        })
                    end
                    table.insert(result.models, {
                        id = "station/rail/asset/cargo_lamps.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = -10.0, y = 0.0, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "station/rail/asset/cargo_lamps.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = 0.0, y = 0.0, z = -5})),
                        tag = tag
                    })
                    table.insert(result.models, {
                        id = "station/rail/asset/cargo_lamps.mdl",
                        transf = Transf.mul(transform, Transf.transl({x = 10.0, y = 0.0, z = -5})),
                        tag = tag
                    })
                end
            end)
        end,
        getModelsFn = function()
            return {
                { 
                    id = "station/rail/asset/cargo_lamps.mdl",
                    transf = {
                        1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        -10, 0, 0, 1
                    },
                }, { 
                    id = "station/rail/asset/cargo_lamps.mdl",
                    transf = {
                        1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1
                    },
                }, { 
                    id = "station/rail/asset/cargo_lamps.mdl",
                    transf = {
                        1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        10, 0, 0, 1
                    },
                },
            }
        end
    }
end