local Transf = require("transf")
local modulesutil = require "modulesutil"

function data()
    return {
        cost = {
            price = 0,
        },
        category = {
            categories = { "misc", },
        },
        description = {
            name = _("railroad_crossing_concrete"),
		    description = _("placeable_on_tracks"),
		    icon = "ui/construction/station/rail/motras/luggage_platform_tall.tga"
        }, 
        availability = {
            yearFrom = 1980,
            yearTo = 0
        },
        type = "motras_railroad_crossing",
        order = {
            value = 89001,
        },
        metadata = {
            motras = {
                theme = "era_c",
                themeType = "railroad_crossing",
            }
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local asset = result.motras:register(slotId)

            asset:handle(function ()
                local track = asset:getParentGridElement()
                local neighborTop = track:getNeighborTop()
                local neighborBottom = track:getNeighborBottom()

                if neighborTop:isTrack() then
                    result.motras.railroadCrossing:addEdges({
                        { modulesutil.mul(transform, {0, 5, -1, 1}), {0.0, -1.0, 0.0} },
                        { modulesutil.mul(transform, {0, 0, -1, 1}), {0.0, -1.0, 0.0} },
                    })
                elseif neighborTop:isPlatform() and neighborTop:getOption('isRailroadCrossingAccess') then
                    result.motras.railroadCrossing:addEdges({
                        { modulesutil.mul(transform, {0, 10, 0.53 - 1, 1}), {0.0, -1.0, 0.0} },
                        { modulesutil.mul(transform, {0, 0, -1, 1}), {0.0, -1.0, 0.0} },
                    })
                elseif neighborTop:isBlank() then
                    result.motras.railroadCrossing:addEdges({
                        { modulesutil.mul(transform, {0, 10, -1, 1}), {0.0, -1.0, 0.0} },
                        { modulesutil.mul(transform, {0, 0, -1, 1}), {0.0, -1.0, 0.0} },
                    })
                end

                if neighborBottom:isPlatform() and neighborBottom:getOption('isRailroadCrossingAccess') then
                    result.motras.railroadCrossing:addEdges({
                        { modulesutil.mul(transform, {0, 0, -1, 1}), {0.0, -1.0, 0.0} },
                        { modulesutil.mul(transform, {0, -5, 0.53 - 1, 1}), {0.0, -1.0, 0.0} },
                    })
                elseif neighborBottom:isBlank() then
                    result.motras.railroadCrossing:addEdges({
                        { modulesutil.mul(transform, {0, 0, -1, 1}), {0.0, -1.0, 0.0} },
                        { modulesutil.mul(transform, {0, -10, -1, 1}), {0.0, -1.0, 0.0} },
                    })
                end

                -- table.insert(result.models, {
                --     id = "station/rail/motras/railroad_crossing_concrete.mdl",
                --     transf = Transf.mul(transform, Transf.transl({x = 0, y = 0, z = -1})),
                --     tag = tag
                -- })
            end)
        end,
        getModelsFn = function()
            return {
                { 
                    id = "station/rail/motras/railroad_crossing_concrete.mdl",
                    transf = {
                        1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1
                    },
                },
            }
        end
    }
end