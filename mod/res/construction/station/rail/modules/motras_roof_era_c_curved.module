local Transf = require('transf')
local BuildingUtils = require('motras_buildingutils')

local function hasCurvedRoof(platform)
    if not platform:isPlatform() then
        return false
    end

    local roofAsset = platform:getAsset(33)
    return roofAsset and BuildingUtils.buildingIsInGroup(roofAsset, {'roof_ug_era_3_curved'})
end

local function hasTopContinuesRoof(platformTopNeighbor)
    local neighbor = platformTopNeighbor:getNeighborTop()

    if hasCurvedRoof(neighbor) then
        return true
    end

    return neighbor:isTrack() and hasCurvedRoof(neighbor:getNeighborTop())
end

function data()
    return {
        availability = {
            yearFrom = 1980,
            yearTo = 0,
        },
        cost = {
            price = 0,
        },
        category = {
            categories = { "misc", },
        },
        description = {
            name = _("Special platform roof"),
            description = _("Decorative.\nRoof with a special design for passenger platforms."),
            icon = "ui/construction/station/rail/modular_station/platform_passenger_roof_curved_era_c.tga",
        },
        -- buildMode = "MULTI",
        type = "motras_roof_small",
        order = {
            value = 805,
        },
        metadata = {
            platform_roof = true,
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local asset = result.motras:register(slotId, { groups = {'roof_ug_era_3_curved'}})
            asset:handle(function (moduleResult)
                local roofTransformation = Transf.mul(transform, Transf.transl({x = -20, y = 0, z = -1}))

                table.insert(result.models, {
                    id = "station/rail/era_c/perron_5_roof_3.mdl",
                    transf = roofTransformation
                })

                if not asset:getParentGridElement():getNeighborLeft():hasAsset(33) then
                    table.insert(result.models, {
                        id = "station/rail/era_c/perron_5_roof_end.mdl",
                        transf = Transf.mul(roofTransformation, Transf.rotZTransl(math.rad(-180), {x = 0, y = 0, z = 0}))
                    })
                end

                if not asset:getParentGridElement():getNeighborRight():hasAsset(33) then
                    table.insert(result.models, {
                        id = "station/rail/era_c/perron_5_roof_end.mdl",
                        transf = Transf.mul(roofTransformation, Transf.transl({x = 40, y = 0, z = 0}))
                    })
                end

                local neighborTop = asset:getParentGridElement():getNeighborTop()
                if neighborTop:isTrack() then
                    if hasTopContinuesRoof(neighborTop) then
                        table.insert(result.models, {
                            id = "station/rail/era_c/perron_5_roof_3_con_l_r_5m.mdl",
                            transf = Transf.mul(roofTransformation, Transf.transl({x = 0, y = 5, z = 0}))
                        })
                    else
                        table.insert(result.models, {
                            id = "station/rail/era_c/perron_5_roof_3_con_l.mdl",
                            transf = Transf.mul(roofTransformation, Transf.rotZTransl(math.rad(-180), {x = 40, y = 0, z = 0}))
                        })
                    end
                end

                local neighborBottom = asset:getParentGridElement():getNeighborBottom()
                if neighborBottom:isTrack() then 
                    local neightborsNeighbor = neighborBottom:getNeighborBottom()
                    local hasContinuesRoof = neightborsNeighbor:isTrack() and hasCurvedRoof(neightborsNeighbor:getNeighborBottom())

                    if hasContinuesRoof then
                        table.insert(result.models, {
                            id = "station/rail/era_c/perron_5_roof_3_con_l_r_5m.mdl",
                            transf = Transf.mul(roofTransformation, Transf.transl({x = 0, y = -5, z = 0}))
                        })
                    end

                    if not (hasContinuesRoof or hasCurvedRoof(neightborsNeighbor)) then
                        table.insert(result.models, {
                            id = "station/rail/era_c/perron_5_roof_3_con_r.mdl",
                            transf = Transf.mul(roofTransformation, Transf.rotZTransl(math.rad(-180), {x = 40, y = 0, z = 0}))
                        })
                    end
                end
                
            end)
        end,
        getModelsFn = function()
            return { }
        end
    }
end