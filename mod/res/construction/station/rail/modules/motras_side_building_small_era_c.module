local ConstructionUtils = require('constructionutil')
local Box = require("motras_box")
local BuildingUtils = require('motras_buildingutils')
local Transf = require('transf')
local Vec3 = require('vec3')
local Stairway = require('motras_stairway')
local PathUtils = require('motras_pathutils')

local decorationModels = {
    models = {
        ["station/rail/asset/era_c_street_pillar.mdl"] = {
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -5.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -3.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, -11.05000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -1.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 1.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 2.50000, -11.05000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -2.50000, -11.05000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 3.00000, -16.30000, 0.00000, 1.00000 },
            { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 5.00000, -16.30000, 0.00000, 1.00000 },
        },
    },
}

function data()
    return {
        cost = {
            price = 5000,
        },
        category = {
            categories = { "passenger buildings", },
        },
        description = {
            name = _("Small side building"),
            description = _("Small side building with street access for passenger stations."),
            icon = "ui/construction/station/rail/modular_station/side_building_1_era_c.tga",
        }, 
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        type = "motras_building_platform40m_small",
        order = {
            value = 1,
        },
        metadata = {
        },
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local asset = result.motras:register(slotId, {groups = {'ug_era_c'}})

            asset:handle(function ()
                local buildingTransform = Transf.mul(transform, Transf.transl({x = 0.0, y = 7.5, z = 0.0}))
                BuildingUtils.makeLot(result, Box:new({ -6, -17, 0 }, { 6, 0, 4 }), buildingTransform)

                local buildingModels = {
                    mainBuilding = "station/rail/era_c/station_1.mdl",
                    connectionToLeftSmallBuilding = "station/rail/era_c/station_1_con_r_1.mdl",
                    connectionToLeftMediumBuilding = "station/rail/era_c/station_1_con_r.mdl",
                    connectionToLeftLargeBuilding = "station/rail/era_c/station_1_con_r.mdl",
                    connectionToRightSmallBuilding = "station/rail/era_c/station_1_con_l_1.mdl",
                    connectionToRightMediumBuilding = "station/rail/era_c/station_1_con_l.mdl",
                    connectionToRightLargeBuilding = "station/rail/era_c/station_1_con_l.mdl",
			        endingLeft = "station/rail/era_c/station_1_end_r.mdl",
			        endingRight = "station/rail/era_c/station_1_end_l.mdl",
                }

                local connectedLeft, connectedRight = BuildingUtils.makeConnectableBuilding(asset, result, buildingModels, buildingTransform)
                ConstructionUtils.addModels(decorationModels, result.models, buildingTransform, tag)

                local platformHeight = asset:getParentGridElement():getPlatformHeight()
                if platformHeight > 0.275 then
                    local stairway = Stairway:new{
                        height = platformHeight - 0.27,
                        stepWidth = 0.29,
                        stepModel = "station/rail/motras/stairs_step_10m.mdl"
                    }

                    local stairsTransformation = Transf.mul(buildingTransform, Transf.rotZTransl(math.pi, {x = 0, y = 0, z = 0.8}))

                    stairway:addStepsToModels(result.models, stairsTransformation)
                    stairway:addPathToModels(result.models, 0, stairsTransformation, 0, 2.5)
                end

                if platformHeight < 0.265 then
                    table.insert(result.models, {
                        id = "station/rail/motras/stairs_step_10m.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = 0, y = -0.289, z = 0.81}))
                    })
                end

                local platformTransformation = Transf.mul(buildingTransform, Transf.transl({x = 0, y = 0, z = asset:getParentGridElement():getAbsolutePlatformHeight()}))
                table.insert(result.models, PathUtils.makePassengerPathModel({-5.0, 1.5, 0.0}, {0.0, 0.0, 0.0}, platformTransformation))
                table.insert(result.models, PathUtils.makePassengerPathModel({0.0, 0.0, 0.0}, {5.0, 1.5, 0.0}, platformTransformation))

                if not connectedLeft then
                    table.insert(result.models, {
                        id = "station/rail/motras/platform_wall_side.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = 5.15, y = 2.5, z = 0.81 + platformHeight - 0.27}))
                    })
                end

                if not connectedRight then
                    table.insert(result.models, {
                        id = "station/rail/motras/platform_wall_side.mdl",
                        transf = Transf.mul(buildingTransform, Transf.transl({x = -5.15, y = 2.5, z = 0.81 + platformHeight - 0.27}))
                    })
                end
            end)
        end,
        getModelsFn = function()
            return {
                { 
                    id = "station/rail/era_c/station_1.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
                { 
                    id = "station/rail/era_c/station_1_end_l.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
                { 
                    id = "station/rail/era_c/station_1_end_r.mdl",
                    transf = Transf.transl(Vec3.new(15,0,0)),
                },
            }
        end
    }
end