local Station = require('motras_station')
local ParamUtils = require('motras_paramutils')
local UgParamUtils = require('paramsutil')
local Blueprint = require('motras_blueprint')
local TrackUpgradeUtils = require('motras_trackupgradeutils')
local t = require('motras_types')

local TallPlatformPattern = require('motras_blueprint_patterns.tall_platform_station')
local WidePlatformPattern = require('motras_blueprint_patterns.wide_platform_station')

local function hasDistanceFromCenter(platformLength, position, distance)
    if platformLength % 2 == 0 then
        if position <= 0 then
            return math.abs(position) + 1 <= distance
        end
        return position <= distance
    end
    return math.abs(position) <= distance
end

local oddBuildingPlacement = {
    {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small_era_c.module'}
    }, {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small_era_c.module'},
        { gridX = 0, slot = 1, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 0, slot = 4, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
    }, {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small_era_c.module'},
        { gridX = 0, slot = 1, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 0, slot = 4, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = -1, slot = 4, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 1, slot = 1, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
    }, {
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_medium_era_c.module'},
        { gridX = 1, slot = 5, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
    }, {
        { gridX = -1, slot = 11, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 0, slot = 11, module = 'station/rail/modules/motras_main_building_large_era_c.module'},
        { gridX = 1, slot = 11, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
    }, {
        { gridX = -2, slot = 6, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = -2, slot = 8, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = -1, slot = 11, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 0, slot = 11, module = 'station/rail/modules/motras_main_building_large_era_c.module'},
        { gridX = 1, slot = 11, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 2, slot = 6, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = 2, slot = 8, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
    }
}

local evenBuildingPlacement = {
    {
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_main_building_small_era_c.module'}
    }, {
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_main_building_small_era_c.module'},
        { gridX = -1, slot = 3, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 0, slot = 2, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
    }, {
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_main_building_small_era_c.module'},
        { gridX = -1, slot = 3, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 0, slot = 2, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = -1, slot = 2, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
        { gridX = 0, slot = 3, module = 'station/rail/modules/motras_side_building_small_era_c.module'},
    }, {
        { gridX = -1, slot = 7, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_main_building_medium_era_c.module'},
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
    }, {
        { gridX = -1, slot = 9, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 0, slot = 9, module = 'station/rail/modules/motras_main_building_large_era_c.module'},
        { gridX = 1, slot = 9, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
    }, {
        { gridX = -3, slot = 8, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = -2, slot = 6, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = -1, slot = 9, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 0, slot = 9, module = 'station/rail/modules/motras_main_building_large_era_c.module'},
        { gridX = 1, slot = 9, module = 'station/rail/modules/motras_side_building_large_era_c.module'},
        { gridX = 1, slot = 8, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
        { gridX = 2, slot = 6, module = 'station/rail/modules/motras_side_building_medium_era_c.module'},
    }
}

local function placeStairs(platformBlueprint, platformLength, platformWidth)
    local widePlatform = platformWidth > 1

    if platformLength < 3 then
        if platformBlueprint:getGridX() == 0 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 31)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 27)
            end
        end
        return
    end

    if platformLength % 2 == 0 then
        if platformBlueprint:getGridX() == 0 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 30)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 26)
            end
        end

        if platformBlueprint:getGridX() == -1 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 31)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 27)
            end
        end
    else
        if platformBlueprint:getGridX() == 0 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 29)
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 32)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 25)
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 28)
            end
        end
    end
end

local function placeRoof(platformBlueprint, platformLength, platformWidth)
    local halfLength = math.floor(platformLength / 2)
    print(platformBlueprint:getHorizontalSize())

    if platformBlueprint:getGridX() == 0 and platformLength % 2 == 1 then
        if platformLength > 4 then
            platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c_curved.module', 33, function(decorationBlueprint)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 2)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 4)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_era_c_truss_mounted_1.module', 3) 
            end)
        else
            platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c.module', 33, function(decorationBlueprint)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 2)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 4)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_era_c_truss_mounted_1.module', 3) 
                if not platformBlueprint:isSidePlatformTop() and (platformBlueprint:isSidePlatformBottom() or platformWidth < 2 or platformBlueprint:hasIslandPlatformSlots()) then
                    decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 5)
                end
                if not platformBlueprint:isSidePlatformBottom() and (platformBlueprint:isSidePlatformTop() or platformWidth < 2 or not platformBlueprint:hasIslandPlatformSlots()) then
                    decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 6)
                end
            end)
        end

        return
    end

    if platformLength > 4 and platformBlueprint:getRelativeHorizontalDistanceToCenter() < platformLength * 0.15 then
        platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c_curved.module', 33, function(decorationBlueprint)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 2)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 4)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_and_clock_era_c_truss_mounted.module', 3) 
        end)
        return
    end

    if platformBlueprint:getRelativeHorizontalDistanceToCenter() < platformLength * 0.35 then
        platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c.module', 33, function(decorationBlueprint)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 2)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_station_sign_era_c.module', 4)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_era_c_truss_mounted_1.module', 3) 
            if not platformBlueprint:isSidePlatformTop() and (platformBlueprint:isSidePlatformBottom() or platformWidth < 2 or platformBlueprint:hasIslandPlatformSlots()) then
                decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 5)
            end
            if not platformBlueprint:isSidePlatformBottom() and (platformBlueprint:isSidePlatformTop() or platformWidth < 2 or not platformBlueprint:hasIslandPlatformSlots()) then
                decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 6)
            end
        end)
        return
    end

    if platformWidth > 1 and platformBlueprint:isIslandPlatform() then
        if platformBlueprint:hasIslandPlatformSlots() then
            platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_platform_lamps_era_c.module', 46, function(decorationBlueprint)
                decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_era_c_truss_mounted_1.module', 3) 
            end)
        end
    else
        platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_platform_lamps_era_c.module', 45, function(decorationBlueprint)
            decorationBlueprint:decorate(t.ASSET_DECORATION_TRUSS_MOUNTED, 'station/rail/modules/motras_platform_number_era_c_truss_mounted_1.module', 3) 
        end)
    end
end

local function calculateBuildingSize(platformLength, trackCount)
    local upgrade = 0
    if trackCount >= 6 then
        upgrade = upgrade + 2
    elseif trackCount >= 4 then
        upgrade = upgrade + 1
    end

    if platformLength < 2 then
        return 1
    end
    if platformLength < 4 then
        return 1 + upgrade
    end
    if platformLength < 6 then
        return 2 + upgrade
    end
    if platformLength < 8 then
        return 3 + upgrade
    end
    return 4 + upgrade
end

local function placeBuildingFromList(platformBlueprint, buildingList, index)
    for i, building in ipairs(buildingList[index]) do
        if platformBlueprint:getGridX() == building.gridX then
            platformBlueprint:addAsset(t.BUILDING, building.module, building.slot)
        end
    end
end

local function placeBuilding(platformBlueprint, platformLength, platformCount, buildingSize)
    buildingSize = buildingSize == 0 and calculateBuildingSize(platformLength, platformCount) or buildingSize
    if platformBlueprint:isSidePlatformTop() then
        if platformLength % 2 == 0 then
            placeBuildingFromList(platformBlueprint, evenBuildingPlacement, buildingSize)
        else
            placeBuildingFromList(platformBlueprint, oddBuildingPlacement, buildingSize)
        end
    end
end

local function blocksNotStationEntrance(platformBlueprint, buildingSize)
    if not platformBlueprint:isSidePlatformTop() then
        return true
    end

    if buildingSize < 5 then
        return true
    end

    local additionalSize = platformBlueprint:horizontalSizeIsEven() and 1 or 0

    if buildingSize == 5 then
        return platformBlueprint:getRelativeHorizontalDistanceToCenter() > 1 + additionalSize
    end

    return platformBlueprint:getRelativeHorizontalDistanceToCenter() > 2 + additionalSize
end

local function placeDecoration(platformBlueprint, platformWidth, buildingSize)
    if platformWidth > 1 and platformBlueprint:isIslandPlatform() then
        if platformBlueprint:hasIslandPlatformSlots() then
            if platformBlueprint:horizontalSizeIsEven() then
                if platformBlueprint:getGridX() == -1 then
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 41)
                elseif platformBlueprint:getGridX() == 0 then
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 44)
                else
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 42)
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 43)
                end
            elseif platformBlueprint:getGridX() ~= 0 then
                platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 42)
                platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 43)
            end
        end
    else
        if blocksNotStationEntrance(platformBlueprint, buildingSize) then
            if platformBlueprint:horizontalSizeIsEven() then
                if platformBlueprint:getGridX() == -1 then
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 37)
                elseif platformBlueprint:getGridX() == 0 then
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 40)
                else
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 38)
                    platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 39)
                end
            elseif platformBlueprint:getGridX() ~= 0 then
                platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 38)
                platformBlueprint:addAsset(t.DECORATION, 'station/rail/modules/motras_decoration_benches_and_trashbin_era_c.module', 39)
            end
        end
    end
end

function data()
    local params = {}
    local commonApiTracks = ParamUtils.addCommonApiTrackParams(params)

    return { 
        type = 'RAIL_STATION',
        description = {
            name = _('motras_mod_name'),			
            description = _('motras_mod_desc'),
            icon = 'ui/construction/station/street/passenger_era_a.tga'
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        params = params,
        constructionTemplates = {
            {
                type = 'DYNAMIC',
                constructionType = 'RAIL_STATION',
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _('motras_base_station'),
                    description = _('motras_base_station_desc'),
                    icon = 'ui/construction/station/street/passenger_era_a.tga'
                },
                data = {
                    params = {
                        {
                            key = "motras_tracks",
                            name = _("Tracks"),
                            values = { _("1"), _("2"), _("3"), _("4"), _("5"), _("6"), _("7"), _("8"),  _("9"), _("10"), _("11"), _("12"), _("13"), _("14"), _("15"), _("16"), _("17"), _("18"), _("19"), _("20"), _("21"), _("22"), _("23"), _("24"),  _("25"), _("26"), _("27"), _("28"), _("29"), _("30"), _("31"), _("32"), _("33"), _("34") },
                            defaultIndex = 0,
                        },
                        {
                            key = "motras_length",
                            name = _("Length"),
                            values = { _("40m"), _("80m"), _("120m"), _("160m"), _("200"), _("240m"), _("320m"), _("360"), _("400"), _("440"), _("480") },
                            defaultIndex = 3,
                        },
                        {
                            key = "motras_platform_width",
                            name = _("Platform Width"),
                            values = { _("tall"), _("wide") },
                            defaultIndex = 0
                        },
                        {
                            key = "motras_platform_height",
                            name = _("Platform Height (in mm)"),
                            values = {_("200"), _("250"), _("270"), _("350"), _("380"), _("550"), _("580"), _("635"), _("680"), _("730"), _("760"), _("840"), _("900"), _("915"), _("920"), _("960"), _("1060"), _("1080"), _("1100"), _("1150"), _("1250")},
                            defaultIndex = 0
                        },
                        {
                            key = "motras_building_size",
                            name = _("Building"),
                            values = {_("None"), _("Auto"), _("Tiny"), _("Small"), _("Medium 1"), _("Medium 2"), _("Large"), _("Huge")},
                            defaultIndex = 1
                        },
                        UgParamUtils.makeTrackTypeParam(),
                        UgParamUtils.makeTrackCatenaryParam(),
                    }
                }
            }
        },
        createTemplateFn = function(params)
            local platformWidth = params.motras_platform_width + 1
            local length = params.motras_length + 1
            local isEvenLength = length % 2 == 0
            local trackCount =  params.motras_tracks + 1

            local platformModules = {
                'station/rail/modules/motras_platform_200_era_c.module',
                'station/rail/modules/motras_platform_250_era_c.module',
                'station/rail/modules/motras_platform_270_era_c.module',
                'station/rail/modules/motras_platform_350_era_c.module',
                'station/rail/modules/motras_platform_380_era_c.module',
                'station/rail/modules/motras_platform_550_era_c.module',
                'station/rail/modules/motras_platform_580_era_c.module',
                'station/rail/modules/motras_platform_635_era_c.module',
                'station/rail/modules/motras_platform_680_era_c.module',
                'station/rail/modules/motras_platform_730_era_c.module',
                'station/rail/modules/motras_platform_760_era_c.module',
                'station/rail/modules/motras_platform_840_era_c.module',
                'station/rail/modules/motras_platform_900_era_c.module',
                'station/rail/modules/motras_platform_915_era_c.module',
                'station/rail/modules/motras_platform_920_era_c.module',
                'station/rail/modules/motras_platform_960_era_c.module',
                'station/rail/modules/motras_platform_1060_era_c.module',
                'station/rail/modules/motras_platform_1080_era_c.module',
                'station/rail/modules/motras_platform_1100_era_c.module',
                'station/rail/modules/motras_platform_1150_era_c.module',
                'station/rail/modules/motras_platform_1250_era_c.module',
            }

            local patternOptions = {
                platformModule =  platformModules[params.motras_platform_height + 1],
                trackModule = 'station/rail/modules/motras_track_train_normal_catenary.module',
                trackCount = trackCount,
                horizontalSize = length
            }

            local blueprint = Blueprint:new{}:decorateEachPlatform(function(platformBlueprint)
                local buildingSize = params.motras_building_size - 1
                buildingSize = buildingSize == 0 and calculateBuildingSize(length, trackCount) or buildingSize

                if trackCount > 1 then
                    placeStairs(platformBlueprint, length, platformWidth)
                end
                placeRoof(platformBlueprint, length, platformWidth)
                placeDecoration(platformBlueprint, platformWidth, buildingSize)
                if params.motras_building_size > 0 then
                    placeBuilding(platformBlueprint, length, trackCount, params.motras_building_size - 1)
                end
            end):createStation(
                params.motras_platform_width > 0 and WidePlatformPattern:new(patternOptions) or TallPlatformPattern:new(patternOptions)
            )

            return blueprint:toTpf2Template()
        end,
        upgradeFn = function(params)
            return TrackUpgradeUtils.upgradeFromParams(params)
        end,
        updateFn = function(params)
            local station = Station:new{
                customTrack1 = params.motras_track_commonapi_1 and commonApiTracks[params.motras_track_commonapi_1 + 1],
                customTrack2 = params.motras_track_commonapi_2 and commonApiTracks[params.motras_track_commonapi_2 + 1]
            }
            station:initializeAndRegisterAll(params.modules or {})

            local result = station:getData()

            return result
        end
    }
end