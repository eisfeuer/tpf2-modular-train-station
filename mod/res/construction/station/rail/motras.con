local Station = require('motras_station')
local ParamUtils = require('motras_paramutils')
local UgParamUtils = require('paramsutil')
local Blueprint = require('motras_blueprint')
local TrackUpgradeUtils = require('motras_trackupgradeutils')
local t = require('motras_types')

local function hasDistanceFromCenter(platformLength, position, distance)
    if platformLength % 2 == 0 then
        if position <= 0 then
            return math.abs(position) + 1 <= distance
        end
        return position <= distance
    end
    return math.abs(position) <= distance
end

local oddBuildingPlacement = {
    {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small.module'}
    }, {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small.module'},
        { gridX = 0, slot = 1, module = 'station/rail/modules/motras_side_building_small.module'},
        { gridX = 0, slot = 4, module = 'station/rail/modules/motras_side_building_small.module'},
    }, {
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_small.module'},
        { gridX = 0, slot = 1, module = 'station/rail/modules/motras_side_building_small.module'},
        { gridX = 0, slot = 4, module = 'station/rail/modules/motras_side_building_small.module'},
        { gridX = -1, slot = 4, module = 'station/rail/modules/motras_side_building_small.module'},
        { gridX = 1, slot = 1, module = 'station/rail/modules/motras_side_building_small.module'},
    }, {
        { gridX = 0, slot = 5, module = 'station/rail/modules/motras_main_building_medium.module'},
        { gridX = 0, slot = 7, module = 'station/rail/modules/motras_main_building_medium.module'},
        { gridX = 1, slot = 5, module = 'station/rail/modules/motras_main_building_medium.module'},
    }
}

local function placeStairs(platformBlueprint, platformLength, platformWidth)
    local widePlatform = platformWidth > 1

    if platformLength % 2 == 0 then
        if platformBlueprint:getGridX() == 0 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 31)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 27)
            end
        end

        if platformBlueprint:getGridX() == 1 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 30)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 26)
            end
        end
    else
        if platformBlueprint:getGridX() == 0 then
            if widePlatform and platformBlueprint:isIslandPlatform() then
                if platformBlueprint:hasIslandPlatformSlots() then
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 29)
                    platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_large.module', 32)
                end
            else
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 25)
                platformBlueprint:addAsset(t.UNDERPASS, 'station/rail/modules/motras_underpass_small.module', 28)
            end
        end
    end
end

local function placeRoof(platformBlueprint, platformLength)
    local halfLength = math.floor(platformLength / 2)

    if platformBlueprint:getGridX() == 0 and platformLength % 2 == 1 then
        if platformLength > 4 then
            platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c_curved.module', 33)
        else
            platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c.module', 33, function(decorationBlueprint)
                decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 5)
                decorationBlueprint:decorate(t.ASSET_DECORATION_CEILING_MOUNTED, 'station/rail/modules/motras_clock_era_c_ceiling_mounted.module', 6)
            end)
        end

        return
    end

    if hasDistanceFromCenter(platformLength, platformBlueprint:getGridX(), math.floor(halfLength * 0.4)) then
        platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c_curved.module', 33)
        return
    end

    if hasDistanceFromCenter(platformLength, platformBlueprint:getGridX(), math.ceil(platformLength < 6 and halfLength * 0.5 or halfLength * 0.6)) then
        platformBlueprint:addAsset(t.ROOF, 'station/rail/modules/motras_roof_era_c.module', 33)
        return
    end
end

local function placeBuildingFromList(platformBlueprint, buildingList, index)
    for i, building in ipairs(buildingList[index]) do
        if platformBlueprint:getGridX() == building.gridX then
            platformBlueprint:addAsset(t.BUILDING, building.module, building.slot)
        end
    end
end

local function placeBuilding(platformBlueprint, platformLength, platformCount)
    if platformBlueprint:isSidePlatformBottom() then
        if platformLength % 2 == 1 then
            placeBuildingFromList(platformBlueprint, oddBuildingPlacement, 4)
        end
    end
end

function data()
    local params = {}
    local commonApiTracks = ParamUtils.addCommonApiTrackParams(params)

    return { 
        type = 'RAIL_STATION',
        description = {
            name = _('motras_mod_name'),			
            description = _('motras_mod_desc'),
            icon = 'ui/construction/station/street/passenger_era_a.tga'
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        params = params,
        constructionTemplates = {
            {
                type = 'DYNAMIC',
                constructionType = 'RAIL_STATION',
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _('motras_base_station'),
                    description = _('motras_base_station_desc'),
                    icon = 'ui/construction/station/street/passenger_era_a.tga'
                },
                data = {
                    params = {
                        {
                            key = "motras_tracks",
                            name = _("Tracks"),
                            values = { _("1"), _("2"), _("3"), _("4"), _("5"), _("6"), _("7"), _("8"),  _("9"), _("10"), _("11"), _("12"), _("13"), _("14"), _("15"), _("16"), _("17"), _("18"), _("19"), _("20"), _("21"), _("22"), _("23"), _("24"),  _("25"), _("26"), _("27"), _("28"), _("29"), _("30"), _("31"), _("32"), _("33"), _("34") },
                            defaultIndex = 0,
                        },
                        {
                            key = "motras_length",
                            name = _("Length"),
                            values = { _("80m"), _("120m"), _("160m"), _("240m"), _("320m"), _("360"), _("400"), _("440"), _("480") },
                            defaultIndex = 2,
                        },
                        {
                            key = "motras_platform_width",
                            name = _("Platform Width"),
                            values = { _("tall"), _("wide") },
                            defaultIndex = 0
                        },
                        {
                            key = "motras_prefer_island_platforms",
                            name = _("Prefer Island Platforms"),
                            values = { _("No"), _("Yes") },
                            defaultIndex = 0
                        },
                        {
                            key = "motras_platform_height",
                            name = _("Platform Height (in mm)"),
                            values = {_("270"), _("550")},
                            defaultIndex = 0
                        },
                        UgParamUtils.makeTrackTypeParam(),
                        UgParamUtils.makeTrackCatenaryParam(),
                    }
                }
            }
        },
        createTemplateFn = function(params)
            local platformWidth = params.motras_platform_width + 1
            local length = params.motras_length + 1
            local isEvenLength = length % 2 == 0
            local platformCount =  params.motras_tracks + 1

            local platformModules = {
                'station/rail/modules/motras_platform_270.module',
                'station/rail/modules/motras_platform_550.module'
            }

            local blueprint = Blueprint:new{}:decorateEachPlatform(function(platformBlueprint)
                placeStairs(platformBlueprint, length, platformWidth)
                placeRoof(platformBlueprint, length)
                placeBuilding(platformBlueprint, length, platformCount)
            end):createStation({
                platformCount = platformCount,
                platformSegmentCount = length,
                platformWidth = platformWidth,
                trackModule = 'station/rail/modules/motras_track_train_normal_catenary.module',
                platformModule = platformModules[params.motras_platform_height + 1]
            })

            return blueprint:toTpf2Template()
        end,
        upgradeFn = function(params)
            return TrackUpgradeUtils.upgradeFromParams(params)
        end,
        updateFn = function(params)
            local station = Station:new{
                customTrack1 = params.motras_track_commonapi_1 and commonApiTracks[params.motras_track_commonapi_1 + 1],
                customTrack2 = params.motras_track_commonapi_2 and commonApiTracks[params.motras_track_commonapi_2 + 1]
            }
            station:initializeAndRegisterAll(params.modules or {})

            local result = station:getData()

            return result
        end
    }
end