local Station = require('motras_station')
local t = require('motras_types')
local c = require('motras_types')
local Slot = require('motras_slot')

local HallRoofUtils = require('motras_hallroofutils')

describe('HallRoofUtils', function ()
    describe('buildHallRoof', function ()
        it('cannot build roof and has a lengt of 0 when only roof slot is occupied', function ()
            local station = Station:new()
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 0}))
            local roofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 54}))
            roofAsset:setOption('hallRoofGroup', 'hall')

            local buildFunc = spy.new(function() end)
            HallRoofUtils.buildHallRoof(roofAsset, buildFunc)
            assert.spy(buildFunc).was.called_with(false, 0, -1)
        end)

        it('cannot build roof and has a lengt of 0 when slot is a starting slot', function ()
            local station = Station:new()
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 0}))
            local roofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 53}))

            local buildFunc = spy.new(function() end)
            HallRoofUtils.buildHallRoof(roofAsset, buildFunc)
            assert.spy(buildFunc).was.called_with(false, 0, -2)
        end)

        it('cannot build roof and has a lengt of 0 when slots are in different groups', function ()
            local station = Station:new()
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 0}))
            local otherRoofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 53}))
            otherRoofAsset:setOption('hallRoofGroup', 'hall2')
            local roofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 54}))

            local buildFunc = spy.new(function() end)
            HallRoofUtils.buildHallRoof(roofAsset, buildFunc)
            assert.spy(buildFunc).was.called_with(false, 0, -1)
        end)

        it('builds roof from start to end', function ()
            local station = Station:new()
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 0}))
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 1}))
            local otherRoofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 53}))
            otherRoofAsset:setOption('hallRoofGroup', 'hall')
            local roofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 1, assetId = 54}))
            roofAsset:setOption('hallRoofGroup', 'hall')

            local buildFunc = spy.new(function() end)
            HallRoofUtils.buildHallRoof(roofAsset, buildFunc)
            assert.spy(buildFunc).was.called_with(true, 10, -1)
        end)

        it('builds roof from end to end', function ()
            local station = Station:new()
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 0}))
            station:initializeAndRegister(Slot.makeId({type = t.PLATFORM, gridX = 0, gridY = 1}))
            local otherRoofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 0, assetId = 54}))
            otherRoofAsset:setOption('hallRoofGroup', 'hall')
            local roofAsset = station:initializeAndRegister(Slot.makeId({type = t.ROOF, gridX = 0, gridY = 1, assetId = 54}))
            roofAsset:setOption('hallRoofGroup', 'hall')

            local buildFunc = spy.new(function() end)
            HallRoofUtils.buildHallRoof(roofAsset, buildFunc)
            assert.spy(buildFunc).was.called_with(true, 5, -1)
        end)
    end)
end)